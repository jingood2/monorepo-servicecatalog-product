version: 0.2

phases:
  pre_build:
    commands:
      - echo $AWS_DEFAULT_REGION
      - echo $CODEBUILD_RESOLVED_SOURCE_VERSION
      - echo $SERVICE_NAME
      - echo $ENVIRONMENT
      - echo $CODEBUILD_BUILD_NUMBER
      - echo $DEPLOY_ENV_NAME
      - echo $AWS_ACCOUNT_ID
      - echo $REPOSITORY_URI
      - echo $TARGET_TYPE
      - echo $ARTIFACT_BUCKET
      - echo $IMAGE_TAG
      - aws --version
      - |
        if [ "$TARGET_TYPE" = "eks" ]; then
          curl -o kubectl https://amazon-eks.s3.us-west-2.amazonaws.com/1.19.6/2021-01-05/bin/linux/amd64/kubectl
          chmod +x ./kubectl
          mv ./kubectl /usr/local/bin/kubectl
          curl -o aws-iam-authenticator https://s3.us-west-2.amazonaws.com/amazon-eks/1.21.2/2021-07-05/bin/linux/amd64/aws-iam-authenticator
          chmod +x ./aws-iam-authenticator
          mkdir -p $HOME/bin && cp ./aws-iam-authenticator $HOME/bin/aws-iam-authenticator && export PATH=$PATH:$HOME/bin
          echo 'export PATH=$PATH:$HOME/bin' >> ~/.bashrc
          aws-iam-authenticator help
          mkdir -p ~/.kube
          aws eks --region ap-northeast-2 update-kubeconfig --name awstf-eks-dev
        fi
  build:
    commands:
      - echo Skip Build on `date`
  post_build:
    commands:
      - echo Post Build started on `date`
      - echo $TARGET_TYPE
      - |
        if [ "$TARGET_TYPE" = "ecs" ]; then 
          aws ecs update-service --cluster $DEPLOY_ENV_NAME --service "$SERVICE_NAME-$ENVIRONMENT" --force-new-deployment --region $AWS_DEFAULT_REGION
        fi 
      - |
        if [ "$TARGET_TYPE" = "beanstalk" ]; then 
          aws elasticbeanstalk create-application-version --application-name $SERVICE_NAME --version-label v$CODEBUILD_BUILD_NUMBER --source-bundle S3Bucket="$ARTIFACT_BUCKET",S3Key="$SERVICE_NAME/$IMAGE_TAG.zip" 
          aws elasticbeanstalk update-environment --application-name $SERVICE_NAME --environment-name "$DEPLOY_ENV_NAME-$SERVICE_NAME" --version-label=v$CODEBUILD_BUILD_NUMBER
        fi 
      - |
        if [ "$TARGET_TYPE" = "eks" ]; then 
          # from S3 Bucket
          aws s3 cp s3://$ARTIFACT_BUCKET/$SERVICE_NAME/$IMAGE_TAG.zip .
          unzip $IMAGE_TAG.zip
          ls -al ./k8s
          sed -i "s#SERVICE_NAME#$SERVICE_NAME#g" ./k8s/deployment.yaml
          sed -i "s#ENVIRONMENT#$ENVIRONMENT#g" ./k8s/deployment.yaml
          sed -i "s#IMAGE_TAG#$IMAGE_TAG#g" ./k8s/deployment.yaml
          sed -i "s#CONTAINER_PORT#$CONTAINER_PORT#g" ./k8s/deployment.yaml
          sed -i "s#SERVICE_NAME#$SERVICE_NAME#g" ./k8s/service.yaml
          sed -i "s#ENVIRONMENT#$ENVIRONMENT#g" ./k8s/service.yaml
          cat ./k8s/deployment.yaml
          kubectl apply -f ./k8s
        fi 
      - |
        if [ "$TARGET_TYPE" = "lambda" ]; then 
          echo Nothing to do on LAMBDA 
        fi 