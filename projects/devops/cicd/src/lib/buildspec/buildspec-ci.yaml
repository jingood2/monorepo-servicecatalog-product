version: 0.2

env:
  exported-variables:
    - IMAGE_TAG
phases:
  pre_build:
    commands:
      - echo Logging in to Amazon ECR...
      - echo $AWS_DEFAULT_REGION
      - echo $CODEBUILD_RESOLVED_SOURCE_VERSION
      - echo $CODEBUILD_SOURCE_VERSION
      - echo $AWS_ACCOUNT_ID
      - echo $SERVICE_NAME
      - echo $CONTAINER_PORT
      - echo $ARTIFACT_BUCKET
      - aws --version
      - aws ecr get-login-password --region $AWS_DEFAULT_REGION | docker login --username AWS --password-stdin $(aws sts get-caller-identity --query Account --output text).dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com
      - COMMIT_HASH=$(echo $CODEBUILD_RESOLVED_SOURCE_VERSION | cut -c 1-7)
      - export IMAGE_TAG=${COMMIT_HASH:=latest}
  build:
    commands:
      - echo Build started on `date`
      - echo $BUILD_TYPE
      - |
        if [ "$BUILD_TYPE" = "GRADLE" ]; then 
          chmod +x gradlew ;
          ./gradlew clean build ;
        fi
      - |
        if [ "$BUILD_TYPE" = "MAVEN" ]; then 
          ./mvn clean package ;
          mv target/*.jar app.jar
        fi
      - |
        if [ "$BUILD_TYPE" = "NPM" ]; then 
          npm install ;
        fi
      - |
        if [ "$BUILD_TYPE" = "DOCKER" ]; then 
          echo Building the Docker image...
          docker build -t $REPOSITORY_URI:latest .
          echo Tagging Docker image...
          docker tag $REPOSITORY_URI:latest $REPOSITORY_URI:$IMAGE_TAG
        fi
  post_build:
    commands:
      - echo Build completed on `date`
      - echo Pushing the Docker images...
      - docker push $REPOSITORY_URI:latest
      - docker push $REPOSITORY_URI:$IMAGE_TAG
      
      - echo $TARGET_TYPE
      - |
        if [ "$TARGET_TYPE" = "ECS" ]; then 
          echo Writing image definitions file for ECS...
          printf '[{"name": "%s", "imageUri":"%s"}]' $SERVICE_NAME $REPOSITORY_URI:$IMAGE_TAG > Dockerrun.aws.json
          zip -r $IMAGE_TAG.zip Dockerrun.aws.json
          aws s3 cp ./$IMAGE_TAG.zip s3://$ARTIFACT_BUCKET/$SERVICE_NAME/$IMAGE_TAG.zip
          aws s3 cp ./$IMAGE_TAG.zip s3://$ARTIFACT_BUCKET/$SERVICE_NAME/latest.zip
        fi 
      - |
        if [ "$TARGET_TYPE" = "BEANSTALK" ]; then 
          echo Writing Dockerrun.aws.json file for Beanstalk ...
          printf '{ "AWSEBDockerrunVersion":"1","Image": {"Name": "%s"}, "Ports":[{"ContainerPort": "%s"}] }' $REPOSITORY_URI:$IMAGE_TAG $CONTAINER_PORT > Dockerrun.aws.json
          zip -r $IMAGE_TAG.zip Dockerrun.aws.json
          aws s3 cp ./$IMAGE_TAG.zip s3://$ARTIFACT_BUCKET/$SERVICE_NAME/$IMAGE_TAG.zip
          aws s3 cp ./$IMAGE_TAG.zip s3://$ARTIFACT_BUCKET/$SERVICE_NAME/latest.zip
        fi 
      - |
        if [ "$TARGET_TYPE" = "EKS" ]; then 
          echo Writing image definitions file for EKS...
        fi 
      - |
        if [ "$TARGET_TYPE" = "LAMBDA" ]; then 
          echo Writing image definitions file for LAMBDA...
        fi 
artifacts:
  files:
    - Dockerrun.aws.json
  name: $IMAGE_TAG
