{
  "Metadata": {
    "AWS::CloudFormation::Interface": {
      "ParameterGroups": [
        {
          "Label": {
            "default": "Environment Information"
          },
          "Parameters": [
            "ProjectName",
            "ServiceName",
            "DeployStage1",
            "DeployStage2"
          ]
        },
        {
          "Label": {
            "default": "Git Repository Information"
          },
          "Parameters": [
            "RepoName",
            "RepoBranch",
            "RepoOwner",
            "GithubSecretTokenId"
          ]
        },
        {
          "Label": {
            "default": "Configuration for Codebuild"
          },
          "Parameters": [
            "BuildType",
            "S3BucketSourceArtifacts"
          ]
        },
        {
          "Label": {
            "default": "Deploy Information"
          },
          "Parameters": [
            "DeployTargetType"
          ]
        }
      ]
    }
  },
  "Parameters": {
    "ProjectName": {
      "Type": "String",
      "Default": "acme",
      "Description": "The name of the Project Name"
    },
    "DeployStage1": {
      "Type": "String",
      "Default": "dev",
      "AllowedValues": [
        "dmz",
        "dev",
        "shared",
        "prod"
      ],
      "Description": "Deploy Stage1 Environment"
    },
    "DeployStage2": {
      "Type": "String",
      "Default": "prod",
      "AllowedValues": [
        "dmz",
        "dev",
        "shared",
        "prod"
      ],
      "Description": "Deploy Stage1 Environment"
    },
    "RepoName": {
      "Type": "String",
      "Description": "Git Repository or S3 Bucket Name"
    },
    "RepoOwner": {
      "Type": "String",
      "Default": "myowner"
    },
    "RepoBranch": {
      "Type": "String",
      "Default": "main"
    },
    "GithubSecretTokenId": {
      "Type": "String",
      "Description": "(Github Only Use)Secret Token Id for Github"
    },
    "ServiceName": {
      "Type": "String",
      "Default": "demoapp",
      "Description": "Service Name"
    },
    "ContainerPort": {
      "Type": "Number",
      "Default": "80",
      "Description": "Container Port"
    },
    "S3BucketSourceArtifacts": {
      "Type": "String",
      "Default": "acme-servicecatalog-cicd-bucket",
      "Description": "S3 Bucket Name for Source and Build Artifact"
    },
    "BuildType": {
      "Type": "String",
      "Default": "DOCKER",
      "AllowedValues": [
        "MAVEN",
        "GRADLE",
        "NPM",
        "PYTHON",
        "DOCKER"
      ],
      "Description": "Source Packaging Tool"
    },
    "DeployTargetType": {
      "Type": "String",
      "Default": "beanstalk",
      "AllowedValues": [
        "ecs",
        "fargate",
        "eks",
        "beanstalk",
        "lambda"
      ],
      "Description": "Source Packaging Tool"
    }
  },
  "Resources": {
    "ECRRepoC36DC9E6": {
      "Type": "AWS::ECR::Repository",
      "Properties": {
        "ImageScanningConfiguration": {
          "ScanOnPush": true
        },
        "LifecyclePolicy": {
          "LifecyclePolicyText": "{\"rules\":[{\"rulePriority\":1,\"selection\":{\"tagStatus\":\"any\",\"countType\":\"imageCountMoreThan\",\"countNumber\":10},\"action\":{\"type\":\"expire\"}}]}"
        },
        "RepositoryName": {
          "Ref": "ServiceName"
        }
      },
      "UpdateReplacePolicy": "Retain",
      "DeletionPolicy": "Retain",
      "Metadata": {
        "aws:cdk:path": "cicd-product/CIGithubProduct/ECRRepo/Resource"
      }
    },
    "BuildProjectRoleAA92C755": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "codebuild.amazonaws.com"
              }
            }
          ],
          "Version": "2012-10-17"
        }
      },
      "Metadata": {
        "aws:cdk:path": "cicd-product/CIGithubProduct/BuildProject/Role/Resource"
      }
    },
    "BuildProjectRoleDefaultPolicy3E9F248C": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "logs:CreateLogGroup",
                "logs:CreateLogStream",
                "logs:PutLogEvents"
              ],
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":logs:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":log-group:/aws/codebuild/",
                      {
                        "Ref": "BuildProject097C5DB7"
                      }
                    ]
                  ]
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":logs:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":log-group:/aws/codebuild/",
                      {
                        "Ref": "BuildProject097C5DB7"
                      },
                      ":*"
                    ]
                  ]
                }
              ]
            },
            {
              "Action": [
                "codebuild:CreateReportGroup",
                "codebuild:CreateReport",
                "codebuild:UpdateReport",
                "codebuild:BatchPutTestCases",
                "codebuild:BatchPutCodeCoverages"
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":codebuild:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":report-group/",
                    {
                      "Ref": "BuildProject097C5DB7"
                    },
                    "-*"
                  ]
                ]
              }
            },
            {
              "Action": [
                "ecr:BatchCheckLayerAvailability",
                "ecr:GetDownloadUrlForLayer",
                "ecr:BatchGetImage"
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": [
                  "ECRRepoC36DC9E6",
                  "Arn"
                ]
              }
            },
            {
              "Action": "ecr:GetAuthorizationToken",
              "Effect": "Allow",
              "Resource": "*"
            },
            {
              "Action": [
                "ecr:PutImage",
                "ecr:InitiateLayerUpload",
                "ecr:UploadLayerPart",
                "ecr:CompleteLayerUpload"
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": [
                  "ECRRepoC36DC9E6",
                  "Arn"
                ]
              }
            },
            {
              "Action": [
                "s3:GetObject*",
                "s3:GetBucket*",
                "s3:List*",
                "s3:DeleteObject*",
                "s3:PutObject",
                "s3:PutObjectLegalHold",
                "s3:PutObjectRetention",
                "s3:PutObjectTagging",
                "s3:PutObjectVersionTagging",
                "s3:Abort*"
              ],
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":s3:::",
                      {
                        "Ref": "S3BucketSourceArtifacts"
                      }
                    ]
                  ]
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":s3:::",
                      {
                        "Ref": "S3BucketSourceArtifacts"
                      },
                      "/*"
                    ]
                  ]
                }
              ]
            }
          ],
          "Version": "2012-10-17"
        },
        "PolicyName": "BuildProjectRoleDefaultPolicy3E9F248C",
        "Roles": [
          {
            "Ref": "BuildProjectRoleAA92C755"
          }
        ]
      },
      "Metadata": {
        "aws:cdk:path": "cicd-product/CIGithubProduct/BuildProject/Role/DefaultPolicy/Resource"
      }
    },
    "BuildProject097C5DB7": {
      "Type": "AWS::CodeBuild::Project",
      "Properties": {
        "Artifacts": {
          "Type": "CODEPIPELINE"
        },
        "Environment": {
          "ComputeType": "BUILD_GENERAL1_SMALL",
          "EnvironmentVariables": [
            {
              "Name": "IMAGE_TAG",
              "Type": "PLAINTEXT",
              "Value": "#{Source_Github_NS.CommitId}"
            },
            {
              "Name": "REPOSITORY_URI",
              "Type": "PLAINTEXT",
              "Value": {
                "Fn::Join": [
                  "",
                  [
                    {
                      "Fn::Select": [
                        4,
                        {
                          "Fn::Split": [
                            ":",
                            {
                              "Fn::GetAtt": [
                                "ECRRepoC36DC9E6",
                                "Arn"
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    ".dkr.ecr.",
                    {
                      "Fn::Select": [
                        3,
                        {
                          "Fn::Split": [
                            ":",
                            {
                              "Fn::GetAtt": [
                                "ECRRepoC36DC9E6",
                                "Arn"
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    ".",
                    {
                      "Ref": "AWS::URLSuffix"
                    },
                    "/",
                    {
                      "Ref": "ECRRepoC36DC9E6"
                    }
                  ]
                ]
              }
            },
            {
              "Name": "AWS_DEFAULT_REGION",
              "Type": "PLAINTEXT",
              "Value": {
                "Ref": "AWS::Region"
              }
            },
            {
              "Name": "AWS_ACCOUNT_ID",
              "Type": "PLAINTEXT",
              "Value": {
                "Ref": "AWS::AccountId"
              }
            },
            {
              "Name": "CONTAINER_PORT",
              "Type": "PLAINTEXT",
              "Value": {
                "Ref": "ContainerPort"
              }
            },
            {
              "Name": "BUILD_TYPE",
              "Type": "PLAINTEXT",
              "Value": {
                "Ref": "BuildType"
              }
            },
            {
              "Name": "TARGET_TYPE",
              "Type": "PLAINTEXT",
              "Value": {
                "Ref": "DeployTargetType"
              }
            },
            {
              "Name": "SERVICE_NAME",
              "Type": "PLAINTEXT",
              "Value": {
                "Ref": "ServiceName"
              }
            },
            {
              "Name": "ARTIFACT_BUCKET",
              "Type": "PLAINTEXT",
              "Value": {
                "Ref": "S3BucketSourceArtifacts"
              }
            }
          ],
          "Image": "aws/codebuild/amazonlinux2-x86_64-standard:3.0",
          "ImagePullCredentialsType": "CODEBUILD",
          "PrivilegedMode": true,
          "Type": "LINUX_CONTAINER"
        },
        "ServiceRole": {
          "Fn::GetAtt": [
            "BuildProjectRoleAA92C755",
            "Arn"
          ]
        },
        "Source": {
          "BuildSpec": "{\n  \"version\": 0.2,\n  \"env\": {\n    \"exported-variables\": [\n      \"IMAGE_TAG\"\n    ]\n  },\n  \"phases\": {\n    \"pre_build\": {\n      \"commands\": [\n        \"echo Logging in to Amazon ECR...\",\n        \"echo $AWS_DEFAULT_REGION\",\n        \"echo $CODEBUILD_RESOLVED_SOURCE_VERSION\",\n        \"echo $CODEBUILD_SOURCE_VERSION\",\n        \"echo $AWS_ACCOUNT_ID\",\n        \"echo $SERVICE_NAME\",\n        \"echo $ARTIFACT_BUCKET\",\n        \"echo $BUILD_TYPE\",\n        \"echo $TARGET_TYPE\",\n        \"aws --version\",\n        \"COMMIT_HASH=$(echo $CODEBUILD_RESOLVED_SOURCE_VERSION | cut -c 1-7)\",\n        \"IMAGE_TAG=${COMMIT_HASH:=latest}\",\n        \"export MAVEN_OPTS=\\\"-Xmx1024m -XX:MaxPermSize=512m\\\"\",\n        \"if [ \\\"$BUILD_TYPE\\\" = \\\"DOCKER\\\" ]; then\\n  aws ecr get-login-password --region $AWS_DEFAULT_REGION | docker login --username AWS --password-stdin $(aws sts get-caller-identity --query Account --output text).dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com\\nfi\\n\"\n      ]\n    },\n    \"build\": {\n      \"commands\": [\n        \"echo Build started on `date`\",\n        \"echo $BUILD_TYPE\",\n        \"if [ \\\"$BUILD_TYPE\\\" = \\\"GRADLE\\\" ]; then \\n  java --version ;\\n  chmod +x gradlew ;\\n  ./gradlew clean build ;\\nfi\\n\",\n        \"if [ \\\"$BUILD_TYPE\\\" = \\\"MAVEN\\\" ]; then \\n  which mvn;\\n  chmod +x mvnw ;\\n  ./mvnw package;\\nfi\\n\",\n        \"if [ \\\"$BUILD_TYPE\\\" = \\\"NPM\\\" ]; then \\n  echo Installing source NPM dependencies...;\\n  npm install -y -g --unsafe-perm ;\\nfi\\n\",\n        \"if [ \\\"$BUILD_TYPE\\\" = \\\"DOCKER\\\" ]; then \\n  echo Building the Docker image...\\n  docker build -t $REPOSITORY_URI:latest .\\n\\n  echo Tagging Docker image...\\n  docker tag $REPOSITORY_URI:latest $REPOSITORY_URI:$IMAGE_TAG\\n\\n  echo Pushing the Docker images...\\n  docker push $REPOSITORY_URI:latest\\n  docker push $REPOSITORY_URI:$IMAGE_TAG\\nfi\\n\"\n      ]\n    },\n    \"post_build\": {\n      \"commands\": [\n        \"echo Build completed on `date`\",\n        \"echo $BUILD_TYPE\",\n        \"if [ \\\"$BUILD_TYPE\\\" = \\\"GRADLE\\\" ]; then \\n  mv build/libs/*.jar app.jar\\n  mv .ebextentions .ebextentions\\n  echo Writing Procfile for Beanstlak...\\n  zip -r $IMAGE_TAG.zip app.jar .ebextentions\\n  aws s3 cp ./$IMAGE_TAG.zip s3://$ARTIFACT_BUCKET/$SERVICE_NAME/$IMAGE_TAG.zip\\n  aws s3 cp ./$IMAGE_TAG.zip s3://$ARTIFACT_BUCKET/$SERVICE_NAME/latest.zip\\nfi\\n\",\n        \"if [ \\\"$BUILD_TYPE\\\" = \\\"MAVEN\\\" ]; then \\n  mv target/*.jar app.jar\\n  mv .ebextentions .ebextentions\\n  echo Writing Procfile for Beanstlak...\\n  zip -r $IMAGE_TAG.zip app.jar .ebextentions\\n  aws s3 cp ./$IMAGE_TAG.zip s3://$ARTIFACT_BUCKET/$SERVICE_NAME/$IMAGE_TAG.zip\\n  aws s3 cp ./$IMAGE_TAG.zip s3://$ARTIFACT_BUCKET/$SERVICE_NAME/latest.zip\\nfi\\n\",\n        \"if [ \\\"$BUILD_TYPE\\\" = \\\"DOCKER\\\" ]; then \\n  if [ \\\"$TARGET_TYPE\\\" = \\\"ecs\\\" ]; then \\n    echo Writing image definitions file for ECS...\\n    printf '[{\\\"name\\\": \\\"%s\\\", \\\"imageUri\\\":\\\"%s\\\"}]' $SERVICE_NAME $REPOSITORY_URI:$IMAGE_TAG > imagedefinitions.json\\n    zip -r $IMAGE_TAG.zip imagedefinitions.json\\n    aws s3 cp ./$IMAGE_TAG.zip s3://$ARTIFACT_BUCKET/$SERVICE_NAME/$IMAGE_TAG.zip\\n    aws s3 cp ./$IMAGE_TAG.zip s3://$ARTIFACT_BUCKET/$SERVICE_NAME/latest.zip\\n  fi \\n\\n  if [ \\\"$TARGET_TYPE\\\" = \\\"beanstalk\\\" ]; then \\n    echo Writing Dockerrun.aws.json file for Beanstalk ...\\n    printf '{ \\\"AWSEBDockerrunVersion\\\":\\\"1\\\",\\\"Image\\\": {\\\"Name\\\": \\\"%s\\\"}, \\\"Ports\\\":[{\\\"ContainerPort\\\": \\\"%s\\\"}] }' $REPOSITORY_URI:$IMAGE_TAG $CONTAINER_PORT > Dockerrun.aws.json\\n    zip -r $IMAGE_TAG.zip Dockerrun.aws.json\\n    aws s3 cp ./$IMAGE_TAG.zip s3://$ARTIFACT_BUCKET/$SERVICE_NAME/$IMAGE_TAG.zip\\n    aws s3 cp ./$IMAGE_TAG.zip s3://$ARTIFACT_BUCKET/$SERVICE_NAME/latest.zip\\n  fi \\n\\n  if [ \\\"$TARGET_TYPE\\\" = \\\"eks\\\" ]; then \\n    echo Writing image definitions file for EKS...\\n    mv ./k8s/* ./k8s\\n    zip -r $IMAGE_TAG.zip ./k8s\\n    aws s3 cp ./$IMAGE_TAG.zip s3://$ARTIFACT_BUCKET/$SERVICE_NAME/$IMAGE_TAG.zip\\n    aws s3 cp ./$IMAGE_TAG.zip s3://$ARTIFACT_BUCKET/$SERVICE_NAME/latest.zip\\n  fi \\n\\n  if [ \\\"$TARGET_TYPE\\\" = \\\"lambda\\\" ]; then \\n    echo Writing image definitions file for LAMBDA...\\n  fi \\nfi\\n\"\n      ]\n    }\n  },\n  \"artifacts\": {\n    \"files\": [\n      \"**/*\"\n    ],\n    \"name\": \"$IMAGE_TAG\"\n  }\n}",
          "Type": "CODEPIPELINE"
        },
        "Cache": {
          "Modes": [
            "LOCAL_DOCKER_LAYER_CACHE"
          ],
          "Type": "LOCAL"
        },
        "EncryptionKey": "alias/aws/s3"
      },
      "Metadata": {
        "aws:cdk:path": "cicd-product/CIGithubProduct/BuildProject/Resource"
      }
    },
    "DeployPloject4UG2hRole9FE7E547": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "codebuild.amazonaws.com"
              }
            }
          ],
          "Version": "2012-10-17"
        }
      },
      "Metadata": {
        "aws:cdk:path": "cicd-product/CIGithubProduct/DeployPloject-4UG2h/Role/Resource"
      }
    },
    "DeployPloject4UG2hRoleDefaultPolicyFBDD1B0D": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "logs:CreateLogGroup",
                "logs:CreateLogStream",
                "logs:PutLogEvents"
              ],
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":logs:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":log-group:/aws/codebuild/",
                      {
                        "Ref": "DeployPloject4UG2h30F4E0FA"
                      }
                    ]
                  ]
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":logs:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":log-group:/aws/codebuild/",
                      {
                        "Ref": "DeployPloject4UG2h30F4E0FA"
                      },
                      ":*"
                    ]
                  ]
                }
              ]
            },
            {
              "Action": [
                "codebuild:CreateReportGroup",
                "codebuild:CreateReport",
                "codebuild:UpdateReport",
                "codebuild:BatchPutTestCases",
                "codebuild:BatchPutCodeCoverages"
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":codebuild:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":report-group/",
                    {
                      "Ref": "DeployPloject4UG2h30F4E0FA"
                    },
                    "-*"
                  ]
                ]
              }
            },
            {
              "Action": [
                "elasticbeanstalk:*",
                "autoscaling:*",
                "elasticloadbalancing:*",
                "ecs:*",
                "s3:*",
                "ec2:*",
                "cloudwatch:*",
                "logs:*",
                "cloudformation:*"
              ],
              "Effect": "Allow",
              "Resource": "*"
            },
            {
              "Action": [
                "s3:GetObject*",
                "s3:GetBucket*",
                "s3:List*"
              ],
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":s3:::",
                      {
                        "Ref": "S3BucketSourceArtifacts"
                      }
                    ]
                  ]
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":s3:::",
                      {
                        "Ref": "S3BucketSourceArtifacts"
                      },
                      "/*"
                    ]
                  ]
                }
              ]
            }
          ],
          "Version": "2012-10-17"
        },
        "PolicyName": "DeployPloject4UG2hRoleDefaultPolicyFBDD1B0D",
        "Roles": [
          {
            "Ref": "DeployPloject4UG2hRole9FE7E547"
          }
        ]
      },
      "Metadata": {
        "aws:cdk:path": "cicd-product/CIGithubProduct/DeployPloject-4UG2h/Role/DefaultPolicy/Resource"
      }
    },
    "DeployPloject4UG2h30F4E0FA": {
      "Type": "AWS::CodeBuild::Project",
      "Properties": {
        "Artifacts": {
          "Type": "CODEPIPELINE"
        },
        "Environment": {
          "ComputeType": "BUILD_GENERAL1_SMALL",
          "EnvironmentVariables": [
            {
              "Name": "SERVICE_NAME",
              "Type": "PLAINTEXT",
              "Value": {
                "Ref": "ServiceName"
              }
            },
            {
              "Name": "ENVIRONMENT",
              "Type": "PLAINTEXT",
              "Value": {
                "Ref": "DeployStage1"
              }
            },
            {
              "Name": "DEPLOY_ENV_NAME",
              "Type": "PLAINTEXT",
              "Value": {
                "Fn::Join": [
                  "",
                  [
                    {
                      "Ref": "ProjectName"
                    },
                    "-",
                    {
                      "Ref": "DeployTargetType"
                    },
                    "-",
                    {
                      "Ref": "DeployStage1"
                    }
                  ]
                ]
              }
            },
            {
              "Name": "AWS_DEFAULT_REGION",
              "Type": "PLAINTEXT",
              "Value": {
                "Ref": "AWS::Region"
              }
            },
            {
              "Name": "AWS_ACCOUNT_ID",
              "Type": "PLAINTEXT",
              "Value": {
                "Ref": "AWS::AccountId"
              }
            },
            {
              "Name": "ARTIFACT_BUCKET",
              "Type": "PLAINTEXT",
              "Value": {
                "Ref": "S3BucketSourceArtifacts"
              }
            },
            {
              "Name": "TARGET_TYPE",
              "Type": "PLAINTEXT",
              "Value": {
                "Ref": "DeployTargetType"
              }
            }
          ],
          "Image": "aws/codebuild/amazonlinux2-x86_64-standard:3.0",
          "ImagePullCredentialsType": "CODEBUILD",
          "PrivilegedMode": true,
          "Type": "LINUX_CONTAINER"
        },
        "ServiceRole": {
          "Fn::GetAtt": [
            "DeployPloject4UG2hRole9FE7E547",
            "Arn"
          ]
        },
        "Source": {
          "BuildSpec": "{\n  \"version\": 0.2,\n  \"phases\": {\n    \"pre_build\": {\n      \"commands\": [\n        \"echo $AWS_DEFAULT_REGION\",\n        \"echo $CODEBUILD_RESOLVED_SOURCE_VERSION\",\n        \"echo $SERVICE_NAME\",\n        \"echo $ENVIRONMENT\",\n        \"echo $CODEBUILD_BUILD_NUMBER\",\n        \"echo $DEPLOY_ENV_NAME\",\n        \"echo $AWS_ACCOUNT_ID\",\n        \"echo $REPOSITORY_URI\",\n        \"echo $TARGET_TYPE\",\n        \"echo $ARTIFACT_BUCKET\",\n        \"echo $IMAGE_TAG\",\n        \"aws --version\",\n        \"if [ \\\"$TARGET_TYPE\\\" = \\\"eks\\\" ]; then\\n  curl -o kubectl https://amazon-eks.s3.us-west-2.amazonaws.com/1.19.6/2021-01-05/bin/linux/amd64/kubectl\\n  chmod +x ./kubectl\\n  mv ./kubectl /usr/local/bin/kubectl\\n  curl -o aws-iam-authenticator https://s3.us-west-2.amazonaws.com/amazon-eks/1.21.2/2021-07-05/bin/linux/amd64/aws-iam-authenticator\\n  chmod +x ./aws-iam-authenticator\\n  mkdir -p $HOME/bin && cp ./aws-iam-authenticator $HOME/bin/aws-iam-authenticator && export PATH=$PATH:$HOME/bin\\n  echo 'export PATH=$PATH:$HOME/bin' >> ~/.bashrc\\n  aws-iam-authenticator help\\n  mkdir -p ~/.kube\\n  aws eks --region ap-northeast-2 update-kubeconfig --name awstf-eks-dev\\nfi\\n\"\n      ]\n    },\n    \"build\": {\n      \"commands\": [\n        \"echo Skip Build on `date`\"\n      ]\n    },\n    \"post_build\": {\n      \"commands\": [\n        \"echo Post Build started on `date`\",\n        \"echo $TARGET_TYPE\",\n        \"if [ \\\"$TARGET_TYPE\\\" = \\\"ecs\\\" ]; then \\n  aws ecs update-service --cluster $DEPLOY_ENV_NAME --service \\\"$SERVICE_NAME-$ENVIRONMENT\\\" --force-new-deployment --region $AWS_DEFAULT_REGION\\nfi \\n\",\n        \"if [ \\\"$TARGET_TYPE\\\" = \\\"beanstalk\\\" ]; then \\n  aws elasticbeanstalk create-application-version --application-name $SERVICE_NAME --version-label v$CODEBUILD_BUILD_NUMBER --source-bundle S3Bucket=\\\"$ARTIFACT_BUCKET\\\",S3Key=\\\"$SERVICE_NAME/$IMAGE_TAG.zip\\\" \\n  aws elasticbeanstalk update-environment --application-name $SERVICE_NAME --environment-name \\\"$DEPLOY_ENV_NAME-$SERVICE_NAME\\\" --version-label=v$CODEBUILD_BUILD_NUMBER\\nfi \\n\",\n        \"if [ \\\"$TARGET_TYPE\\\" = \\\"eks\\\" ]; then \\n  # from S3 Bucket\\n  aws s3 cp s3://$ARTIFACT_BUCKET/$SERVICE_NAME/$IMAGE_TAG.zip .\\n  unzip $IMAGE_TAG.zip\\n  ls -al ./k8s\\n  sed -i \\\"s#SERVICE_NAME#$SERVICE_NAME#g\\\" ./k8s/deployment.yaml\\n  sed -i \\\"s#ENVIRONMENT#$ENVIRONMENT#g\\\" ./k8s/deployment.yaml\\n  sed -i \\\"s#IMAGE_TAG#$IMAGE_TAG#g\\\" ./k8s/deployment.yaml\\n  sed -i \\\"s#CONTAINER_PORT#$CONTAINER_PORT#g\\\" ./k8s/deployment.yaml\\n  sed -i \\\"s#SERVICE_NAME#$SERVICE_NAME#g\\\" ./k8s/service.yaml\\n  sed -i \\\"s#ENVIRONMENT#$ENVIRONMENT#g\\\" ./k8s/service.yaml\\n  cat ./k8s/deployment.yaml\\n  kubectl apply -f ./k8s\\nfi \\n\",\n        \"if [ \\\"$TARGET_TYPE\\\" = \\\"lambda\\\" ]; then \\n  echo Nothing to do on LAMBDA \\nfi \\n\"\n      ]\n    }\n  }\n}",
          "Type": "CODEPIPELINE"
        },
        "Cache": {
          "Type": "NO_CACHE"
        },
        "EncryptionKey": "alias/aws/s3"
      },
      "Metadata": {
        "aws:cdk:path": "cicd-product/CIGithubProduct/DeployPloject-4UG2h/Resource"
      }
    },
    "DeployPloject8v4zZRole989C0349": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "codebuild.amazonaws.com"
              }
            }
          ],
          "Version": "2012-10-17"
        }
      },
      "Metadata": {
        "aws:cdk:path": "cicd-product/CIGithubProduct/DeployPloject-8v4zZ/Role/Resource"
      }
    },
    "DeployPloject8v4zZRoleDefaultPolicy4F1E3279": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "logs:CreateLogGroup",
                "logs:CreateLogStream",
                "logs:PutLogEvents"
              ],
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":logs:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":log-group:/aws/codebuild/",
                      {
                        "Ref": "DeployPloject8v4zZBC2756AA"
                      }
                    ]
                  ]
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":logs:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":log-group:/aws/codebuild/",
                      {
                        "Ref": "DeployPloject8v4zZBC2756AA"
                      },
                      ":*"
                    ]
                  ]
                }
              ]
            },
            {
              "Action": [
                "codebuild:CreateReportGroup",
                "codebuild:CreateReport",
                "codebuild:UpdateReport",
                "codebuild:BatchPutTestCases",
                "codebuild:BatchPutCodeCoverages"
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":codebuild:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":report-group/",
                    {
                      "Ref": "DeployPloject8v4zZBC2756AA"
                    },
                    "-*"
                  ]
                ]
              }
            },
            {
              "Action": [
                "elasticbeanstalk:*",
                "autoscaling:*",
                "elasticloadbalancing:*",
                "ecs:*",
                "s3:*",
                "ec2:*",
                "cloudwatch:*",
                "logs:*",
                "cloudformation:*"
              ],
              "Effect": "Allow",
              "Resource": "*"
            },
            {
              "Action": [
                "s3:GetObject*",
                "s3:GetBucket*",
                "s3:List*"
              ],
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":s3:::",
                      {
                        "Ref": "S3BucketSourceArtifacts"
                      }
                    ]
                  ]
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":s3:::",
                      {
                        "Ref": "S3BucketSourceArtifacts"
                      },
                      "/*"
                    ]
                  ]
                }
              ]
            }
          ],
          "Version": "2012-10-17"
        },
        "PolicyName": "DeployPloject8v4zZRoleDefaultPolicy4F1E3279",
        "Roles": [
          {
            "Ref": "DeployPloject8v4zZRole989C0349"
          }
        ]
      },
      "Metadata": {
        "aws:cdk:path": "cicd-product/CIGithubProduct/DeployPloject-8v4zZ/Role/DefaultPolicy/Resource"
      }
    },
    "DeployPloject8v4zZBC2756AA": {
      "Type": "AWS::CodeBuild::Project",
      "Properties": {
        "Artifacts": {
          "Type": "CODEPIPELINE"
        },
        "Environment": {
          "ComputeType": "BUILD_GENERAL1_SMALL",
          "EnvironmentVariables": [
            {
              "Name": "SERVICE_NAME",
              "Type": "PLAINTEXT",
              "Value": {
                "Ref": "ServiceName"
              }
            },
            {
              "Name": "ENVIRONMENT",
              "Type": "PLAINTEXT",
              "Value": {
                "Ref": "DeployStage2"
              }
            },
            {
              "Name": "DEPLOY_ENV_NAME",
              "Type": "PLAINTEXT",
              "Value": {
                "Fn::Join": [
                  "",
                  [
                    {
                      "Ref": "ProjectName"
                    },
                    "-",
                    {
                      "Ref": "DeployTargetType"
                    },
                    "-",
                    {
                      "Ref": "DeployStage2"
                    }
                  ]
                ]
              }
            },
            {
              "Name": "AWS_DEFAULT_REGION",
              "Type": "PLAINTEXT",
              "Value": {
                "Ref": "AWS::Region"
              }
            },
            {
              "Name": "AWS_ACCOUNT_ID",
              "Type": "PLAINTEXT",
              "Value": {
                "Ref": "AWS::AccountId"
              }
            },
            {
              "Name": "ARTIFACT_BUCKET",
              "Type": "PLAINTEXT",
              "Value": {
                "Ref": "S3BucketSourceArtifacts"
              }
            },
            {
              "Name": "TARGET_TYPE",
              "Type": "PLAINTEXT",
              "Value": {
                "Ref": "DeployTargetType"
              }
            }
          ],
          "Image": "aws/codebuild/amazonlinux2-x86_64-standard:3.0",
          "ImagePullCredentialsType": "CODEBUILD",
          "PrivilegedMode": true,
          "Type": "LINUX_CONTAINER"
        },
        "ServiceRole": {
          "Fn::GetAtt": [
            "DeployPloject8v4zZRole989C0349",
            "Arn"
          ]
        },
        "Source": {
          "BuildSpec": "{\n  \"version\": 0.2,\n  \"phases\": {\n    \"pre_build\": {\n      \"commands\": [\n        \"echo $AWS_DEFAULT_REGION\",\n        \"echo $CODEBUILD_RESOLVED_SOURCE_VERSION\",\n        \"echo $SERVICE_NAME\",\n        \"echo $ENVIRONMENT\",\n        \"echo $CODEBUILD_BUILD_NUMBER\",\n        \"echo $DEPLOY_ENV_NAME\",\n        \"echo $AWS_ACCOUNT_ID\",\n        \"echo $REPOSITORY_URI\",\n        \"echo $TARGET_TYPE\",\n        \"echo $ARTIFACT_BUCKET\",\n        \"echo $IMAGE_TAG\",\n        \"aws --version\",\n        \"if [ \\\"$TARGET_TYPE\\\" = \\\"eks\\\" ]; then\\n  curl -o kubectl https://amazon-eks.s3.us-west-2.amazonaws.com/1.19.6/2021-01-05/bin/linux/amd64/kubectl\\n  chmod +x ./kubectl\\n  mv ./kubectl /usr/local/bin/kubectl\\n  curl -o aws-iam-authenticator https://s3.us-west-2.amazonaws.com/amazon-eks/1.21.2/2021-07-05/bin/linux/amd64/aws-iam-authenticator\\n  chmod +x ./aws-iam-authenticator\\n  mkdir -p $HOME/bin && cp ./aws-iam-authenticator $HOME/bin/aws-iam-authenticator && export PATH=$PATH:$HOME/bin\\n  echo 'export PATH=$PATH:$HOME/bin' >> ~/.bashrc\\n  aws-iam-authenticator help\\n  mkdir -p ~/.kube\\n  aws eks --region ap-northeast-2 update-kubeconfig --name awstf-eks-dev\\nfi\\n\"\n      ]\n    },\n    \"build\": {\n      \"commands\": [\n        \"echo Skip Build on `date`\"\n      ]\n    },\n    \"post_build\": {\n      \"commands\": [\n        \"echo Post Build started on `date`\",\n        \"echo $TARGET_TYPE\",\n        \"if [ \\\"$TARGET_TYPE\\\" = \\\"ecs\\\" ]; then \\n  aws ecs update-service --cluster $DEPLOY_ENV_NAME --service \\\"$SERVICE_NAME-$ENVIRONMENT\\\" --force-new-deployment --region $AWS_DEFAULT_REGION\\nfi \\n\",\n        \"if [ \\\"$TARGET_TYPE\\\" = \\\"beanstalk\\\" ]; then \\n  aws elasticbeanstalk create-application-version --application-name $SERVICE_NAME --version-label v$CODEBUILD_BUILD_NUMBER --source-bundle S3Bucket=\\\"$ARTIFACT_BUCKET\\\",S3Key=\\\"$SERVICE_NAME/$IMAGE_TAG.zip\\\" \\n  aws elasticbeanstalk update-environment --application-name $SERVICE_NAME --environment-name \\\"$DEPLOY_ENV_NAME-$SERVICE_NAME\\\" --version-label=v$CODEBUILD_BUILD_NUMBER\\nfi \\n\",\n        \"if [ \\\"$TARGET_TYPE\\\" = \\\"eks\\\" ]; then \\n  # from S3 Bucket\\n  aws s3 cp s3://$ARTIFACT_BUCKET/$SERVICE_NAME/$IMAGE_TAG.zip .\\n  unzip $IMAGE_TAG.zip\\n  ls -al ./k8s\\n  sed -i \\\"s#SERVICE_NAME#$SERVICE_NAME#g\\\" ./k8s/deployment.yaml\\n  sed -i \\\"s#ENVIRONMENT#$ENVIRONMENT#g\\\" ./k8s/deployment.yaml\\n  sed -i \\\"s#IMAGE_TAG#$IMAGE_TAG#g\\\" ./k8s/deployment.yaml\\n  sed -i \\\"s#CONTAINER_PORT#$CONTAINER_PORT#g\\\" ./k8s/deployment.yaml\\n  sed -i \\\"s#SERVICE_NAME#$SERVICE_NAME#g\\\" ./k8s/service.yaml\\n  sed -i \\\"s#ENVIRONMENT#$ENVIRONMENT#g\\\" ./k8s/service.yaml\\n  cat ./k8s/deployment.yaml\\n  kubectl apply -f ./k8s\\nfi \\n\",\n        \"if [ \\\"$TARGET_TYPE\\\" = \\\"lambda\\\" ]; then \\n  echo Nothing to do on LAMBDA \\nfi \\n\"\n      ]\n    }\n  }\n}",
          "Type": "CODEPIPELINE"
        },
        "Cache": {
          "Type": "NO_CACHE"
        },
        "EncryptionKey": "alias/aws/s3"
      },
      "Metadata": {
        "aws:cdk:path": "cicd-product/CIGithubProduct/DeployPloject-8v4zZ/Resource"
      }
    },
    "CodePipelineRoleB31C27BE": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "codepipeline.amazonaws.com"
              }
            }
          ],
          "Version": "2012-10-17"
        },
        "Policies": [
          {
            "PolicyDocument": {
              "Statement": [
                {
                  "Action": [
                    "s3:GetObject",
                    "s3:List*",
                    "s3:GetObjectVersion"
                  ],
                  "Effect": "Allow",
                  "Resource": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition"
                        },
                        ":s3:::",
                        {
                          "Ref": "S3BucketSourceArtifacts"
                        },
                        "/*"
                      ]
                    ]
                  }
                }
              ],
              "Version": "2012-10-17"
            },
            "PolicyName": "rootPermissions"
          }
        ]
      },
      "Metadata": {
        "aws:cdk:path": "cicd-product/CIGithubProduct/CodePipelineRole/Resource"
      }
    },
    "GitHubPipeline7B79E906": {
      "Type": "AWS::CodePipeline::Pipeline",
      "Properties": {
        "RoleArn": {
          "Fn::GetAtt": [
            "CodePipelineRoleB31C27BE",
            "Arn"
          ]
        },
        "Stages": [
          {
            "Actions": [
              {
                "ActionTypeId": {
                  "Category": "Source",
                  "Owner": "ThirdParty",
                  "Provider": "GitHub",
                  "Version": "1"
                },
                "Configuration": {
                  "Owner": {
                    "Ref": "RepoOwner"
                  },
                  "Repo": {
                    "Ref": "RepoName"
                  },
                  "Branch": {
                    "Ref": "RepoBranch"
                  },
                  "OAuthToken": {
                    "Fn::Join": [
                      "",
                      [
                        "{{resolve:secretsmanager:",
                        {
                          "Ref": "GithubSecretTokenId"
                        },
                        ":SecretString:::}}"
                      ]
                    ]
                  },
                  "PollForSourceChanges": false
                },
                "Name": "Github",
                "Namespace": "Source_Github_NS",
                "OutputArtifacts": [
                  {
                    "Name": "Source"
                  }
                ],
                "RunOrder": 1
              }
            ],
            "Name": "Source"
          },
          {
            "Actions": [
              {
                "ActionTypeId": {
                  "Category": "Build",
                  "Owner": "AWS",
                  "Provider": "CodeBuild",
                  "Version": "1"
                },
                "Configuration": {
                  "ProjectName": {
                    "Ref": "BuildProject097C5DB7"
                  },
                  "EnvironmentVariables": "[{\"name\":\"IMAGE_TAG\",\"type\":\"PLAINTEXT\",\"value\":\"#{Source_Github_NS.CommitId}\"}]"
                },
                "InputArtifacts": [
                  {
                    "Name": "Source"
                  }
                ],
                "Name": "Build",
                "Namespace": "ImageBuild_Build_NS",
                "OutputArtifacts": [
                  {
                    "Name": "Build"
                  }
                ],
                "RoleArn": {
                  "Fn::GetAtt": [
                    "GitHubPipelineImageBuildCodePipelineActionRoleBC32B61F",
                    "Arn"
                  ]
                },
                "RunOrder": 1
              }
            ],
            "Name": "ImageBuild"
          },
          {
            "Actions": [
              {
                "ActionTypeId": {
                  "Category": "Build",
                  "Owner": "AWS",
                  "Provider": "CodeBuild",
                  "Version": "1"
                },
                "Configuration": {
                  "ProjectName": {
                    "Ref": "DeployPloject4UG2h30F4E0FA"
                  },
                  "EnvironmentVariables": "[{\"name\":\"IMAGE_TAG\",\"type\":\"PLAINTEXT\",\"value\":\"#{ImageBuild_Build_NS.IMAGE_TAG}\"}]"
                },
                "InputArtifacts": [
                  {
                    "Name": "Build"
                  }
                ],
                "Name": "Deploy",
                "RoleArn": {
                  "Fn::GetAtt": [
                    "GitHubPipelineDeployOnDevDeployCodePipelineActionRoleBE3FDF11",
                    "Arn"
                  ]
                },
                "RunOrder": 1
              }
            ],
            "Name": "DeployOnDev"
          },
          {
            "Actions": [
              {
                "ActionTypeId": {
                  "Category": "Approval",
                  "Owner": "AWS",
                  "Provider": "Manual",
                  "Version": "1"
                },
                "Name": "Approval",
                "RoleArn": {
                  "Fn::GetAtt": [
                    "GitHubPipelineApprovalCodePipelineActionRoleADCADD05",
                    "Arn"
                  ]
                },
                "RunOrder": 1
              }
            ],
            "Name": "Approval"
          },
          {
            "Actions": [
              {
                "ActionTypeId": {
                  "Category": "Build",
                  "Owner": "AWS",
                  "Provider": "CodeBuild",
                  "Version": "1"
                },
                "Configuration": {
                  "ProjectName": {
                    "Ref": "DeployPloject8v4zZBC2756AA"
                  },
                  "EnvironmentVariables": "[{\"name\":\"IMAGE_TAG\",\"type\":\"PLAINTEXT\",\"value\":\"#{ImageBuild_Build_NS.IMAGE_TAG}\"}]"
                },
                "InputArtifacts": [
                  {
                    "Name": "Build"
                  }
                ],
                "Name": "Deploy",
                "RoleArn": {
                  "Fn::GetAtt": [
                    "GitHubPipelineDeployOnProdDeployCodePipelineActionRoleB56DA98C",
                    "Arn"
                  ]
                },
                "RunOrder": 1
              }
            ],
            "Name": "DeployOnProd"
          }
        ],
        "ArtifactStore": {
          "Location": {
            "Ref": "S3BucketSourceArtifacts"
          },
          "Type": "S3"
        },
        "Name": {
          "Ref": "ServiceName"
        }
      },
      "DependsOn": [
        "CodePipelineRoleB31C27BE"
      ],
      "Metadata": {
        "aws:cdk:path": "cicd-product/CIGithubProduct/GitHubPipeline/Resource"
      }
    },
    "GitHubPipelineSourceGithubWebhookResource97724FA2": {
      "Type": "AWS::CodePipeline::Webhook",
      "Properties": {
        "Authentication": "GITHUB_HMAC",
        "AuthenticationConfiguration": {
          "SecretToken": {
            "Fn::Join": [
              "",
              [
                "{{resolve:secretsmanager:",
                {
                  "Ref": "GithubSecretTokenId"
                },
                ":SecretString:::}}"
              ]
            ]
          }
        },
        "Filters": [
          {
            "JsonPath": "$.ref",
            "MatchEquals": "refs/heads/{Branch}"
          }
        ],
        "TargetAction": "Github",
        "TargetPipeline": {
          "Ref": "GitHubPipeline7B79E906"
        },
        "TargetPipelineVersion": 1,
        "RegisterWithThirdParty": true
      },
      "Metadata": {
        "aws:cdk:path": "cicd-product/CIGithubProduct/GitHubPipeline/Source/Github/WebhookResource"
      }
    },
    "GitHubPipelineImageBuildCodePipelineActionRoleBC32B61F": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "AWS": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":iam::",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":root"
                    ]
                  ]
                }
              }
            }
          ],
          "Version": "2012-10-17"
        }
      },
      "Metadata": {
        "aws:cdk:path": "cicd-product/CIGithubProduct/GitHubPipeline/ImageBuild/Build/CodePipelineActionRole/Resource"
      }
    },
    "GitHubPipelineImageBuildCodePipelineActionRoleDefaultPolicyB079F6A1": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "codebuild:BatchGetBuilds",
                "codebuild:StartBuild",
                "codebuild:StopBuild"
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": [
                  "BuildProject097C5DB7",
                  "Arn"
                ]
              }
            }
          ],
          "Version": "2012-10-17"
        },
        "PolicyName": "GitHubPipelineImageBuildCodePipelineActionRoleDefaultPolicyB079F6A1",
        "Roles": [
          {
            "Ref": "GitHubPipelineImageBuildCodePipelineActionRoleBC32B61F"
          }
        ]
      },
      "Metadata": {
        "aws:cdk:path": "cicd-product/CIGithubProduct/GitHubPipeline/ImageBuild/Build/CodePipelineActionRole/DefaultPolicy/Resource"
      }
    },
    "GitHubPipelineDeployOnDevDeployCodePipelineActionRoleBE3FDF11": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "AWS": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":iam::",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":root"
                    ]
                  ]
                }
              }
            }
          ],
          "Version": "2012-10-17"
        }
      },
      "Metadata": {
        "aws:cdk:path": "cicd-product/CIGithubProduct/GitHubPipeline/DeployOnDev/Deploy/CodePipelineActionRole/Resource"
      }
    },
    "GitHubPipelineDeployOnDevDeployCodePipelineActionRoleDefaultPolicy8D0AFB78": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "codebuild:BatchGetBuilds",
                "codebuild:StartBuild",
                "codebuild:StopBuild"
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": [
                  "DeployPloject4UG2h30F4E0FA",
                  "Arn"
                ]
              }
            }
          ],
          "Version": "2012-10-17"
        },
        "PolicyName": "GitHubPipelineDeployOnDevDeployCodePipelineActionRoleDefaultPolicy8D0AFB78",
        "Roles": [
          {
            "Ref": "GitHubPipelineDeployOnDevDeployCodePipelineActionRoleBE3FDF11"
          }
        ]
      },
      "Metadata": {
        "aws:cdk:path": "cicd-product/CIGithubProduct/GitHubPipeline/DeployOnDev/Deploy/CodePipelineActionRole/DefaultPolicy/Resource"
      }
    },
    "GitHubPipelineApprovalCodePipelineActionRoleADCADD05": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "AWS": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":iam::",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":root"
                    ]
                  ]
                }
              }
            }
          ],
          "Version": "2012-10-17"
        }
      },
      "Metadata": {
        "aws:cdk:path": "cicd-product/CIGithubProduct/GitHubPipeline/Approval/Approval/CodePipelineActionRole/Resource"
      }
    },
    "GitHubPipelineDeployOnProdDeployCodePipelineActionRoleB56DA98C": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "AWS": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":iam::",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":root"
                    ]
                  ]
                }
              }
            }
          ],
          "Version": "2012-10-17"
        }
      },
      "Metadata": {
        "aws:cdk:path": "cicd-product/CIGithubProduct/GitHubPipeline/DeployOnProd/Deploy/CodePipelineActionRole/Resource"
      }
    },
    "GitHubPipelineDeployOnProdDeployCodePipelineActionRoleDefaultPolicyF1B54969": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "codebuild:BatchGetBuilds",
                "codebuild:StartBuild",
                "codebuild:StopBuild"
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": [
                  "DeployPloject8v4zZBC2756AA",
                  "Arn"
                ]
              }
            }
          ],
          "Version": "2012-10-17"
        },
        "PolicyName": "GitHubPipelineDeployOnProdDeployCodePipelineActionRoleDefaultPolicyF1B54969",
        "Roles": [
          {
            "Ref": "GitHubPipelineDeployOnProdDeployCodePipelineActionRoleB56DA98C"
          }
        ]
      },
      "Metadata": {
        "aws:cdk:path": "cicd-product/CIGithubProduct/GitHubPipeline/DeployOnProd/Deploy/CodePipelineActionRole/DefaultPolicy/Resource"
      }
    },
    "CDKMetadata": {
      "Type": "AWS::CDK::Metadata",
      "Properties": {
        "Analytics": "v2:deflate64:H4sIAAAAAAAA/02QS27DMAxEz9K9zNRtkAMkFzCcRZeFTDEtbVk09ElRGLp7FDlAspohOPMI8AP2B3h/03+hQTM1lgdYy/C9BvJXRkIdtZUf6LyYhPEcNU6K0MPa0yKBo/h/dbq455QViqEhsTWwdryQZUelPhLGe/Jhs2I9F4pYqv27dmIZK25zWYVPOCacKB51oApeHsQnu+Zf/BcNvyJTznWhvZ4pklc9BUket2sv/iTOcGRxWbnChzHsru0B2ra8ZQzMjU8u8kzQb3oDpGyULjIBAAA="
      },
      "Metadata": {
        "aws:cdk:path": "cicd-product/CIGithubProduct/CDKMetadata/Default"
      },
      "Condition": "CDKMetadataAvailable"
    }
  },
  "Conditions": {
    "CDKMetadataAvailable": {
      "Fn::Or": [
        {
          "Fn::Or": [
            {
              "Fn::Equals": [
                {
                  "Ref": "AWS::Region"
                },
                "af-south-1"
              ]
            },
            {
              "Fn::Equals": [
                {
                  "Ref": "AWS::Region"
                },
                "ap-east-1"
              ]
            },
            {
              "Fn::Equals": [
                {
                  "Ref": "AWS::Region"
                },
                "ap-northeast-1"
              ]
            },
            {
              "Fn::Equals": [
                {
                  "Ref": "AWS::Region"
                },
                "ap-northeast-2"
              ]
            },
            {
              "Fn::Equals": [
                {
                  "Ref": "AWS::Region"
                },
                "ap-south-1"
              ]
            },
            {
              "Fn::Equals": [
                {
                  "Ref": "AWS::Region"
                },
                "ap-southeast-1"
              ]
            },
            {
              "Fn::Equals": [
                {
                  "Ref": "AWS::Region"
                },
                "ap-southeast-2"
              ]
            },
            {
              "Fn::Equals": [
                {
                  "Ref": "AWS::Region"
                },
                "ca-central-1"
              ]
            },
            {
              "Fn::Equals": [
                {
                  "Ref": "AWS::Region"
                },
                "cn-north-1"
              ]
            },
            {
              "Fn::Equals": [
                {
                  "Ref": "AWS::Region"
                },
                "cn-northwest-1"
              ]
            }
          ]
        },
        {
          "Fn::Or": [
            {
              "Fn::Equals": [
                {
                  "Ref": "AWS::Region"
                },
                "eu-central-1"
              ]
            },
            {
              "Fn::Equals": [
                {
                  "Ref": "AWS::Region"
                },
                "eu-north-1"
              ]
            },
            {
              "Fn::Equals": [
                {
                  "Ref": "AWS::Region"
                },
                "eu-south-1"
              ]
            },
            {
              "Fn::Equals": [
                {
                  "Ref": "AWS::Region"
                },
                "eu-west-1"
              ]
            },
            {
              "Fn::Equals": [
                {
                  "Ref": "AWS::Region"
                },
                "eu-west-2"
              ]
            },
            {
              "Fn::Equals": [
                {
                  "Ref": "AWS::Region"
                },
                "eu-west-3"
              ]
            },
            {
              "Fn::Equals": [
                {
                  "Ref": "AWS::Region"
                },
                "me-south-1"
              ]
            },
            {
              "Fn::Equals": [
                {
                  "Ref": "AWS::Region"
                },
                "sa-east-1"
              ]
            },
            {
              "Fn::Equals": [
                {
                  "Ref": "AWS::Region"
                },
                "us-east-1"
              ]
            },
            {
              "Fn::Equals": [
                {
                  "Ref": "AWS::Region"
                },
                "us-east-2"
              ]
            }
          ]
        },
        {
          "Fn::Or": [
            {
              "Fn::Equals": [
                {
                  "Ref": "AWS::Region"
                },
                "us-west-1"
              ]
            },
            {
              "Fn::Equals": [
                {
                  "Ref": "AWS::Region"
                },
                "us-west-2"
              ]
            }
          ]
        }
      ]
    }
  }
}