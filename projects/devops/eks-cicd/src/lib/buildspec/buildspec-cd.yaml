version: 0.2

phases:
  pre_build:
    commands:
      - echo $AWS_DEFAULT_REGION
      - echo $CODEBUILD_RESOLVED_SOURCE_VERSION
      - echo $SERVICE_NAME
      - echo $ENVIRONMENT
      - echo $CODEBUILD_BUILD_NUMBER
      - echo $DEPLOY_ENV_NAME
      - echo $AWS_ACCOUNT_ID
      - echo $REPOSITORY_URI
      - echo $TARGET_TYPE
      - echo $ARTIFACT_BUCKET
      - echo $IMAGE_TAG
      - aws --version
      - |
        if [ "$TARGET_TYPE" = "eks" ]; then
          curl -o kubectl https://amazon-eks.s3.us-west-2.amazonaws.com/1.19.6/2021-01-05/bin/linux/amd64/kubectl
          chmod +x ./kubectl
          mv ./kubectl /usr/local/bin/kubectl
          mkdir -p ~/.kube
          aws eks --region $AWS_DEFAUT_REGION update-kubeconfig --name $PROJECT_NAME-eks-$ENVIRONMENT

          # install argocd cli
          curl --silent --location -o /usr/local/bin/argocd https://github.com/argoproj/argo-cd/releases/download/v2.4.7/argocd-linux-amd64
          chmod +x /usr/local/bin/argocd

          # login argo-server
          #kubectl patch svc argocd-server -n argocd -p '{"spec": {"type": "LoadBalancer"}}'
          export ARGOCD_SERVER=`kubectl get svc argocd-server -n argocd -o json | jq --raw-output '.status.loadBalancer.ingress[0].hostname'`
          export ARGO_PWD=`kubectl -n argocd get secret argocd-initial-admin-secret -o jsonpath="{.data.password}" | base64 -d`
          argocd login $ARGOCD_SERVER --username admin --password $ARGO_PWD --insecure
        fi
  build:
    commands:
      - echo Skip Build on `date`
      - |
        if [ "$TARGET_TYPE" = "eks" ]; then 
         

        fi 
  post_build:
    commands:
      - echo Post Build started on `date`
      - echo $TARGET_TYPE
      - |
        if [ "$TARGET_TYPE" = "ecs" ]; then 
          aws ecs update-service --cluster $DEPLOY_ENV_NAME --service "$SERVICE_NAME-$ENVIRONMENT" --force-new-deployment --region $AWS_DEFAULT_REGION
        fi 
      - |
        if [ "$TARGET_TYPE" = "beanstalk" ]; then 
          aws elasticbeanstalk create-application-version --application-name $SERVICE_NAME --version-label v$CODEBUILD_BUILD_NUMBER --source-bundle S3Bucket="$ARTIFACT_BUCKET",S3Key="$SERVICE_NAME/$IMAGE_TAG.zip" 
          aws elasticbeanstalk update-environment --application-name $SERVICE_NAME --environment-name "$DEPLOY_ENV_NAME-$SERVICE_NAME" --version-label=v$CODEBUILD_BUILD_NUMBER
        fi 
      - |
        if [ "$TARGET_TYPE" = "eks" ]; then 
          CONTEXT_NAME=`kubectl config view -o jsonpath='{.current-context}'`
          argocd cluster add $CONTEXT_NAME

          kubectl create namespace $PROJECT_NAME-$ENVIRONMENT
          argocd app create $SERVICE_NAME --repo $REPOSITORY_URI --path ./dist/$ENVIRONMENT --dest-server https://kubernetes.default.svc --dest-namespace $PROJECT_NAME-$ENVIRONMENT
          argocd app get $SERVICE_NAME

          #argocd app sync ecsdemo-nodejs
          argocd app get $SERVICE_NAME
          argocd app sync $SERVICE_NAME

        fi 
      - |
        if [ "$TARGET_TYPE" = "lambda" ]; then 
          echo Nothing to do on LAMBDA 
        fi 